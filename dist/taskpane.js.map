{"version":3,"file":"taskpane.js","mappings":"yBACA,IAAIA,EAAsB,G,g0CCA1BA,EAAoBC,EAAI,SAASC,EAASC,GACzC,IAAI,IAAIC,KAAOD,EACXH,EAAoBK,EAAEF,EAAYC,KAASJ,EAAoBK,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EJ,EAAoBK,EAAI,SAASK,EAAKC,GAAQ,OAAOL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,ICQ/F,IAAMI,EAAU,6BAEVC,EAAgB,CACpB,sBACA,wCACA,OACA,QACA,eACA,sBACA,qBACA,wBACA,eACA,aAGIC,EAAmB,CACvB,WACA,aACA,OACA,QACA,aACA,UACA,aACA,cACA,UACA,eACA,WACA,UACA,gBACA,UACA,SACA,cACA,eACA,YACA,QACA,UACA,WACA,SACA,QACA,QACA,YACA,UACA,UACA,WACA,SACA,UACA,SACA,YACA,YACA,QACA,YACA,WACA,UACA,WACA,SACA,UACA,UACA,SACA,aACA,WACA,UACA,YACA,UACA,QACA,YACA,SACA,WACA,WACA,SACA,UACA,SACA,SACA,UACA,QACA,SACA,UACA,MACA,OACA,MACA,YACA,SACA,SACA,SAGIC,EAAQ,CACZ,YACA,UACA,mBACA,WACA,kBACA,kBACA,mBAIIC,EAAU,uFAGVC,EAAgB,SAACC,GACrB,OAAOC,OAAOD,GACXE,cACAC,MACC,0JAkBN,SAASC,EAAeC,GACtB,IAAIC,EACJ,IACEA,EAAM,IAAIC,IAAIF,GACd,MAAOG,GACP,OAAO,EAET,MAAwB,UAAjBF,EAAIG,UAAyC,WAAjBH,EAAIG,SAclC,SAAeC,IAAtB,+B,iDAAO,sHAEGC,MAAMD,IAAN,4CAAU,WAAOE,GAAP,qGAKdC,SAASC,eAAe,eAAeC,MAAMC,QAAU,OACvDH,SAASC,eAAe,YAAYC,MAAMC,QAAU,OACpDH,SAASC,eAAe,UAAUC,MAAMC,QAAU,OAG9CC,EAAmBL,EAAQM,SAASC,WAAWC,sBAC/CC,EAAQJ,EAAiBK,gBACvBC,KAAK,iCAZG,SAaRX,EAAQY,OAbA,UAcVC,EAAOJ,EAAMK,OACbC,EAAWN,EAAMM,SACjBC,EAAcP,EAAMO,YAGX,OAATH,EAnBU,wBAoBZZ,SAASC,eAAe,UAAUC,MAAMC,QAAU,OAClDH,SAASC,eAAe,aAAaC,MAAMC,QAAU,OArBzC,4CA0BRa,EAAaJ,GA1BL,yBA2BRK,EAAgBF,EAAaD,GA3BrB,yBA4BRI,EAAkBN,EAAME,GA5BhB,yBA6BRK,EAAkBP,EAAME,GA7BhB,yBA8BRM,EAAmBR,EAAME,GA9BjB,yBA+BRO,EAAmBT,EAAME,GA/BjB,yBAgCRQ,EAAYV,EAAME,GAhCV,yBAiCRS,EAAUX,EAAME,GAjCR,yBAkCRU,EAAqBZ,EAAME,GAlCnB,yBAmCRW,EAAwBb,EAAME,GAnCtB,yBAoCRY,EAAgBd,EAAME,GApCd,QAuC8C,SAAxDd,SAASC,eAAe,cAAcC,MAAMC,UAC9CH,SAASC,eAAe,UAAUC,MAAMC,QAAU,OAClDH,SAASC,eAAe,iBAAiBC,MAAMC,QAAU,eAzC7C,4CAAV,uDAFH,sDA+CHwB,QAAQC,MAAR,MA/CG,wD,wBAmDA,SAAeC,IAAtB,+B,iDAAO,sHAEG/B,MAAMD,IAAN,4CAAU,WAAOE,GAAP,uFAKdC,SAASC,eAAe,cAAcC,MAAMC,QAAU,OACtDH,SAASC,eAAe,eAAeC,MAAMC,QAAU,OACvDH,SAASC,eAAe,iBAAiBC,MAAMC,QAAU,OAEzDH,SAASC,eAAe,iBAAiB6B,UAAY,GACrD9B,SAASC,eAAe,qBAAqB6B,UAAY,GACzD9B,SAASC,eAAe,sBAAsB6B,UAAY,GAC1D9B,SAASC,eAAe,sBAAsB6B,UAAY,GAC1D9B,SAASC,eAAe,uBAAuB6B,UAAY,GAC3D9B,SAASC,eAAe,wBAAwB6B,UAAY,GAC5D9B,SAASC,eAAe,gBAAgB6B,UAAY,GACpD9B,SAASC,eAAe,cAAc6B,UAAY,GAClD9B,SAASC,eAAe,yBAAyB6B,UAAY,GAC7D9B,SAASC,eAAe,oBAAoB6B,UAAY,GAExD9B,SAASC,eAAe,wBAAwB6B,UAAY,GAC5D9B,SAASC,eAAe,gBAAgB6B,UAAY,GACpD9B,SAASC,eAAe,kBAAkB6B,UAAY,GACtD9B,SAASC,eAAe,8BAA8B6B,UAAY,GAvBpD,UAyBRjC,IAzBQ,4CAAV,uDAFH,sDA8BH8B,QAAQC,MAAR,MA9BG,wD,wBAkCA,SAAeZ,EAAtB,kC,iDAAO,WAA4BJ,GAA5B,yGAEGd,MAAMD,IAAN,4CAAU,WAAOE,GAAP,4FAWd,IANAC,SAASC,eAAe,iBAAiB6B,UAAY7C,EAGjD8C,EAAUnB,EAAK,GAEfoB,EAAS,GACJC,EAAI,EAAGA,EAAI,GAAIA,IAElBF,EAAQE,KAAOnD,EAAcmD,KAC3BC,EAD+B,UACTrD,EAAQoD,GADC,KAEnCD,EAAOG,KAAK,CAACD,EAAD,0BAAsCpD,EAAcmD,GAApD,QAfF,GAoBdjC,SAASC,eAAe,iBAAiB6B,UAAY,KACjDE,EAAOI,OAAS,GArBN,iCAsBNC,EAAmB,gBAAiB,UAAWL,GAtBzC,OAuBDhC,SAASC,eAAe,iBAAiBqC,uBAAuB,QAAQ,GAC9ER,WAAL,6LAGA9B,SAASC,eAAe,eAAesC,QAAUC,EA3BrC,4CAAV,uDAFH,sDAiCHb,QAAQC,MAAR,MAjCG,wD,wBAqCA,SAAeX,EAAtB,oC,iDAAO,WAA+BF,EAAaD,GAA5C,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,mGAMdC,SAASC,eAAe,qBAAqB6B,UAAY7C,EAGrDmB,EAAmBL,EAAQM,SAASC,WAAWC,qBAE/CyB,EAAS,KACTjB,EAAc,IAZJ,wBAcR0B,EAAcrC,EAAiBsC,SAAjB,aAAgC7D,EAAQkC,EAAc,IAAtD,OAA2DD,KACjEJ,KAAK,UACjBiB,QAAQgB,IAAI,WAhBA,SAiBN5C,EAAQY,OAjBF,OAoBZ,IAFAgB,QAAQgB,IAAIF,EAAY5B,QACpBA,EAAS4B,EAAY5B,OAChBoB,EAAI,EAAGA,EAAIpB,EAAOuB,OAAQH,IACjC,IAASW,EAAI,EAAGA,EAAI/B,EAAOoB,GAAGG,OAAQQ,IACf,KAAjB/B,EAAOoB,GAAGW,IACZZ,EAAOG,KAAK,CAAC,GAAD,OAAItD,EAAQ+D,EAAI,KAAhB,OAAsBX,EAAI,GAA1B,gCAIlBN,QAAQgB,IAAIX,GA3BA,WA+BdhC,SAASC,eAAe,qBAAqB6B,UAAY,KACrDE,EAAOI,OAAS,GAhCN,kCAiCNC,EAAmB,oBAAqB,QAASL,GAjC3C,QAkCDhC,SAASC,eAAe,qBAAqBqC,uBAAuB,QAAQ,GAClFR,WAAL,qLAGA9B,SAASC,eAAe,eAAesC,QAAUM,EAtCrC,4CAAV,uDAFH,sDA4CHlB,QAAQC,MAAR,MA5CG,wD,wBAgDA,SAAeV,EAAtB,oC,iDAAO,WAAiCN,EAAME,GAAvC,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,8GAKdC,SAASC,eAAe,sBAAsB6B,UAAY7C,EAC1De,SAASC,eAAe,wBAAwB6B,UAAY7C,EAGxD6D,EAAe,EACfC,EAAQ,QACRC,EAAwB,CAC1B,IAAK,IAAK,IAAK,IAAK,IAAK,IACzB,IAAK,IAAK,IAAK,IAAK,IAAK,IACzB,IAAK,IAAK,IAAK,IAAK,IAAK,IACzB,IAAK,IAAK,IAAK,KAGbhB,EAAS,GACTiB,EAAW,GACNC,EAAQ,EApBH,YAoBMA,EAAQpC,GApBd,iBAyBZ,IAJIqC,EArBQ,WAqBkBD,EAAQ,GAClCE,EAAMxC,EAAKsC,GACXG,EAAcD,EAAIN,GAAcQ,WAAWC,OAC3CC,EAA8B,GACzBvB,EAAI,EAAGA,EAAIe,EAAsBZ,OAAQH,IAC5CoB,EAAYI,SAAST,EAAsBf,KAC7CuB,EAA4BrB,KAAKa,EAAsBf,IA3B/C,GAgCoB,OAA5Bc,EAAMW,KAAKL,GAhCH,iBAiCVrB,EAAOG,KAAK,CAACgB,EAAD,uBAAsCE,EAAtC,yBAjCF,2BAoCa,KAAhBA,EApCG,iBAqCVrB,EAAOG,KAAK,CAACgB,EAAD,yBArCF,2BAwCFE,EAAYI,SAAS,KAxCnB,iBAyCVzB,EAAOG,KAAK,CAACgB,EAAD,uBAAsCE,EAAtC,+BAzCF,6BA4CHA,EAAYjB,OAAS,GA5ClB,iBA6CVJ,EAAOG,KAAK,CAACgB,EAAD,uBAAsCE,EAAtC,oBA7CF,6BAgDHA,EAAYjB,OAAS,IAhDlB,iBAiDVJ,EAAOG,KAAK,CAACgB,EAAD,4BAjDF,6BAoDHK,EAA4BpB,OAAS,GApDlC,iBAqDVJ,EAAOG,KAAK,CACVgB,EADU,uBAEME,EAFN,6CAEsDG,EAA4BG,KAAK,QAvDzF,wBA4DNC,EAAoBP,EAAYhE,cAC3BuD,EAAI,EA7DH,aA6DMA,EAAI7D,EAAiBqD,QA7D3B,qBA8DJwB,EAAkBH,SAAS1E,EAAiB6D,IA9DxC,wBA+DNZ,EAAOG,KAAK,CACVgB,EADU,uBAEME,EAFN,gDAEyDtE,EAAiB6D,GAF1E,OA/DN,6BA6DmCA,IA7DnC,wBAwERS,EAAYQ,OAAO,KAAOR,EAAYQ,OAAO,GAAGC,eAClDb,EAASd,KAAK,CAACgB,EAAD,uBAAsCE,EAAtC,4CAzEJ,QAoBwBH,IApBxB,0BA6EdlD,SAASC,eAAe,sBAAsB6B,UAAY,GAC1D9B,SAASC,eAAe,wBAAwB6B,UAAY,KACxDE,EAAOI,OAAS,GA/EN,kCAgFNC,EAAmB,qBAAsB,UAAWL,GAhF9C,aAkFViB,EAASb,OAAS,GAlFR,kCAmFN2B,EAAqB,uBAAwB,UAAWd,GAnFlD,4CAAV,uDAFH,sDAyFHtB,QAAQC,MAAR,MAzFG,wD,wBA6FA,SAAeT,EAAtB,oC,iDAAO,WAAiCP,EAAME,GAAvC,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,gGAQd,IANAC,SAASC,eAAe,sBAAsB6B,UAAY7C,EAKtD+C,EAAS,GACJkB,EAAQ,EAAGA,EAAQpC,EAAUoC,IAChCc,EADyC,WACfd,EAAQ,GAClCE,EAAMxC,EAAKsC,GACXe,EAAcb,EANH,GAMmBE,WAAWC,OACzCW,EAAoBD,EAAY5E,cAEhB,KAAhB4E,EACFjC,EAAOG,KAAK,CAAC6B,EAAD,yBAGJhF,EAAMyE,SAASS,IACvBlC,EAAOG,KAAK,CAAC6B,EAAD,uBAAsCC,EAAtC,kBAnBF,GAuBdjE,SAASC,eAAe,sBAAsB6B,UAAY,KACtDE,EAAOI,OAAS,GAxBN,gCAyBNC,EAAmB,qBAAsB,QAASL,GAzB5C,2CAAV,uDAFH,sDA+BHL,QAAQC,MAAR,MA/BG,wD,wBAmCA,SAAeR,EAAtB,oC,iDAAO,WAAkCR,EAAME,GAAxC,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,8FAQd,IANAC,SAASC,eAAe,uBAAuB6B,UAAY7C,EAKvD+C,EAAS,GACJkB,EAAQ,EAAGA,EAAQpC,EAAUoC,IAChCiB,EADyC,WACrBjB,EAAQ,GAC5BE,EAAMxC,EAAKsC,GAGD,MAFV/D,EAAQiE,EANI,GAMaE,WAAWC,UAGjCrE,EAAcC,IACjB6C,EAAOG,KAAK,CAACgC,EAAD,wBAAiChF,EAAjC,mBAfJ,GAoBda,SAASC,eAAe,uBAAuB6B,UAAY,KACvDE,EAAOI,OAAS,GArBN,gCAsBNC,EAAmB,sBAAuB,SAAUL,GAtB9C,2CAAV,uDAFH,sDA4BHL,QAAQC,MAAR,MA5BG,wD,wBAgCA,SAAeP,EAAtB,oC,iDAAO,WAAkCT,EAAME,GAAxC,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,0FAQd,IANAC,SAASC,eAAe,wBAAwB6B,UAAY7C,EAKxD+C,EAAS,GACJkB,EAAQ,EAAGA,EAAQpC,EAAUoC,IAChCkB,EADyC,WACdlB,EAAQ,GAIlB,KAHXtC,EAAKsC,GALQ,GAMoBI,WAAWC,QAGpDvB,EAAOG,KAAK,CAACiC,EAAD,0BAdF,GAkBdpE,SAASC,eAAe,wBAAwB6B,UAAY,KACxDE,EAAOI,OAAS,GAnBN,gCAoBNC,EAAmB,uBAAwB,UAAWL,GApBhD,2CAAV,uDAFH,sDA0BHL,QAAQC,MAAR,MA1BG,wD,wBA8BA,SAAeN,EAAtB,oC,iDAAO,WAA2BV,EAAME,GAAjC,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,kGAWd,IATAC,SAASC,eAAe,gBAAgB6B,UAAY7C,EACpDe,SAASC,eAAe,kBAAkB6B,UAAY7C,EAMlD+C,EAAS,GACTiB,EAAW,GACNC,EAAQ,EAAGA,EAAQpC,EAAUoC,IAChCmB,EADyC,WACrBnB,EAAQ,GAC5BE,EAAMxC,EAAKsC,GACXoB,EAAOlB,EARI,GAQYE,WAAWC,OAClCgB,EAAQnB,EARI,GAQaE,WAAWC,OAE3B,cAATe,GAAkC,KAAVC,GAC1BvC,EAAOG,KAAK,CAACkC,EAAD,gCACZ1C,QAAQ6C,KAAR,6CAAmDtB,EAAQ,KAG3C,cAAToB,GAAwBC,EAAMnC,QAAU,EAC/Ca,EAASd,KAAK,CAACkC,EAAD,oCAGE,cAATC,GAAkC,KAAVC,GAC/BvC,EAAOG,KAAK,CAACkC,EAAe,mDA3BlB,GA+BdrE,SAASC,eAAe,gBAAgB6B,UAAY,KAChDE,EAAOI,OAAS,GAhCN,kCAiCNC,EAAmB,eAAgB,QAASL,GAjCtC,WAoCdhC,SAASC,eAAe,kBAAkB6B,UAAY,KAClDmB,EAASb,OAAS,GArCR,kCAsCN2B,EAAqB,iBAAkB,QAASd,GAtC1C,4CAAV,uDAFH,sDA4CHtB,QAAQC,MAAR,MA5CG,wD,wBAgDA,SAAeL,EAAtB,oC,iDAAO,WAAyBX,EAAME,GAA/B,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,sHAYd,IAVAC,SAASC,eAAe,cAAc6B,UAAY7C,EAClDe,SAASC,eAAe,gBAAgB6B,UAAY7C,EAOhD+C,EAAS,GACTiB,EAAW,GACNC,EAAQ,EAAGA,EAAQpC,EAAUoC,IAAS,CACzCuB,EADyC,WACvBvB,EAAQ,GAC1BwB,EAFyC,WAEjBxB,EAAQ,GAChCE,EAAMxC,EAAKsC,GACXoB,EAAOlB,EAVI,GAUYE,WAAWC,OAClCoB,EAAUvB,EAVA,GAUeE,WAAWC,OACzB,GACXqB,EAAgBxB,EAXA,GAWqBE,WAAWC,OAC/B,GAGnBsB,EADEF,EAAQlB,SAAS,MACRkB,EAAQG,MAAM,MAEd,CAACH,GAEdhD,QAAQgB,IAAIkC,GAEVE,EADEH,EAAcnB,SAAS,MACRmB,EAAcE,MAAM,MAEpB,CAACF,GAEpBjD,QAAQgB,IAAIoC,GArBiC,IAsB3BF,GAtB2B,IAsB7C,2BAAWpF,EAAiB,QAEb,cAAT6E,EAEU,KAAR7E,EACFuC,EAAOG,KAAK,CAACsC,EAAD,8BAGJlF,EAAeE,GAOhBA,EAAIgE,SAAS,WACpBzB,EAAOG,KAAK,CAACsC,EAAD,oDAPZzC,EAAOG,KAAK,CACVsC,EADU,gDAE+BhF,EAF/B,0CAWE,cAAT6E,GAAgC,KAAR7E,IAC1BF,EAAeE,IAClBuC,EAAOG,KAAK,CACVsC,EADU,gDAE+BhF,EAF/B,0CAKdwD,EAASd,KAAK,CAACsC,EAAD,iDAjD2B,kCAoDrBM,GApDqB,IAoD7C,2BAAWC,EAA6B,QAEzB,cAATV,GAAsC,KAAdU,EACrBzF,EAAeyF,IAClBhD,EAAOG,KAAK,CACVuC,EADU,gDAE+BM,EAF/B,mCAOE,cAATV,GAAsC,KAAdU,GAC/BhD,EAAOG,KAAK,CAACuC,EAAD,0CAhE6B,+BAZjC,GAiFd1E,SAASC,eAAe,cAAc6B,UAAY,KAC9CE,EAAOI,OAAS,GAlFN,kCAmFNC,EAAmB,aAAc,MAAOL,GAnFlC,WAsFdhC,SAASC,eAAe,gBAAgB6B,UAAY,KAChDmB,EAASb,OAAS,GAvFR,kCAwFN2B,EAAqB,eAAgB,MAAOd,GAxFtC,4CAAV,uDAFH,sDA8FHtB,QAAQC,MAAR,MA9FG,wD,wBAkGA,SAAeF,EAAtB,oC,iDAAO,WAA+Bd,EAAME,GAArC,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,uHAEdC,SAASC,eAAe,oBAAoB6B,UAAY7C,EAEpDmB,EAAmBL,EAAQM,SAASC,WAAWC,qBAE/C0B,EAAInB,EACiBV,EAAiBsC,SAAS,MAEhCuC,SAAW,CAAC,CAAC,oBAAD,OAAqBhD,EAArB,iBAA+BA,EAA/B,iBAAyCA,EAAzC,iBAAmDA,EAAnD,iBAA6DA,EAA7D,OATjB,SAURlC,EAAQY,OAVA,cAWVuE,EAAsB9E,EAAiBsC,SAAjB,cAAiCT,KACvCvB,KAAK,UAZX,UAaRX,EAAQY,OAbA,QAmBd,IAJIwE,EAAaD,EAAoBrE,OAAOuE,OACxCC,EAAaF,EAAWG,gBACxBC,EAAcnH,OAAOoH,KAAKH,GAC1BrD,EAAS,GACb,MAAkBuD,EAAlB,eAA+B,CAApBrH,EAAoB,KACzBuH,EAAc,GADW,IAETJ,EAAWnH,IAFF,IAE7B,2BAAWgF,EAA0B,QACnCuC,EAAYtD,KAAK,CAAC,IAAD,OAAKe,EAAQ,GAAb,UAAqBtC,EAAKsC,EAAQ,GAAG,GAArC,cAA6CtC,EAAKsC,EAAQ,GAAG,MAHnD,8BAKzBuC,EAAYrD,OAAS,GACvBJ,EAAOG,KAAKsD,GAzBF,OA4BdP,EAAoBQ,QA5BN,UA6BR3F,EAAQY,OA7BA,WA+BdX,SAASC,eAAe,oBAAoB6B,UAAY,KACpDE,EAAOI,OAAS,GAhCN,kCAiCNuD,EAA6B,mBAAoB,YAAa3D,GAjCxD,QAkCDhC,SAASC,eAAe,oBAAoBqC,uBAAuB,QAAQ,GACjFR,WAAL,yoCAiBA9B,SAASC,eAAe,0BAA0BsC,QAAUqD,EAC5D5F,SAASC,eAAe,+BAA+BsC,QAAUsD,EArDrD,4CAAV,uDAFH,sDA2DHlE,QAAQC,MAAR,MA3DG,wD,wBA+DA,SAAeH,EAAtB,oC,iDAAO,WAAuCb,EAAME,GAA7C,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,uHAEdC,SAASC,eAAe,8BAA8B6B,UAAY7C,EAE9DmB,EAAmBL,EAAQM,SAASC,WAAWC,sBAE/CuF,EAAwB1F,EAAiBsC,SAAjB,cAAiC5B,KACvCJ,KAAK,UAPb,SAQRX,EAAQY,OARA,OAkBd,IAPIoF,EAAeD,EAAsBjF,OAAOuE,OAC5CY,EAAeD,EAAaT,gBAC5BW,EAAgB7H,OAAOoH,KAAKQ,GAC5BE,EAAa,CAAC,mBAAoB,UAAW,kBAAmB,mBAGhEjD,EAAW,GACf,MAAkBgD,EAAlB,eAAiC,CAAtB/H,EAAsB,KAC3BiI,EAAgB,GADW,IAEXH,EAAa9H,IAFF,IAE/B,2BAAWgF,EAA4B,QACjCgD,EAAWzC,SAAS7C,EAAKsC,EAAQ,GAAG,KACtCiD,EAAchE,KAAK,CAAC,IAAD,OAAKe,EAAQ,GAAb,UAAqBtC,EAAKsC,EAAQ,GAAG,GAArC,cAA6CtC,EAAKsC,EAAQ,GAAG,MAJrD,8BAO3BiD,EAAc/D,OAAS,GACzBa,EAASd,KAAKgE,GA1BJ,GA8BdnG,SAASC,eAAe,8BAA8B6B,UAAY,KAC9DmB,EAASb,OAAS,GA/BR,kCAgCNgE,EACJ,6BACA,qCACAnD,GAnCU,4CAAV,uDAFH,sDA0CHtB,QAAQC,MAAR,MA1CG,wD,wBA8CA,SAAeJ,EAAtB,oC,iDAAO,WAAoCZ,EAAME,GAA1C,yGAEGhB,MAAMD,IAAN,4CAAU,WAAOE,GAAP,sGAWd,IATAC,SAASC,eAAe,yBAAyB6B,UAAY7C,EAKzDoH,EAAmB,CAAC,UAAW,kBAAmB,mBACtD1E,QAAQgB,IAAI,iCAER2D,EAAkB,IAAIC,IACjBtE,EAAI,EAAGA,EAAInB,EAAUmB,IACA,qBAAxBrB,EAAKqB,GAPM,IAQbqE,EAAgBE,IAAI5F,EAAKqB,GAPT,IAapB,IAHAN,QAAQgB,IAAI2D,GAERtE,EAAS,GACJkB,EAAQ,EAAGA,EAAQpC,EAAUoC,IAChCuD,EADyC,WACfvD,EAAQ,GAClCE,EAAMxC,EAAKsC,GACXoB,EAAOlB,EAjBI,GAiBYE,WAAWC,OAClCmD,EAAqBtD,EAjBP,GAiB0BE,WAAWC,OAEnD+C,EAAgBK,IAAID,IAClBL,EAAiB5C,SAASa,EAAKjF,gBACjC2C,EAAOG,KAAK,CAACsE,EAAD,UAAyBnC,EAAzB,0BA3BJ,GAgCdtE,SAASC,eAAe,yBAAyB6B,UAAY,KACzDE,EAAOI,OAAS,GAjCN,kCAkCNC,EAAmB,wBAAyB,+BAAgCL,GAlCtE,4CAAV,uDAFH,sDAwCHL,QAAQC,MAAR,MAxCG,wD,wBA4CA,SAAeY,IAAtB,+B,iDAAO,sHAEG1C,MAAMD,IAAN,4CAAU,WAAOE,GAAP,uFAESA,EAAQM,SAASC,WAAWC,qBACtBmC,SAAS,SAEhC7B,OAAS,CAAC/B,GALF,SAMRiB,EAAQY,OANA,OAOdX,SAASC,eAAe,iBAAiB6B,UAAY,GAPvC,2CAAV,uDAFH,sDAYHH,QAAQC,MAAR,MAZG,wD,wBAgBA,SAAeiB,IAAtB,+B,iDAAO,sHAEG/C,MAAMD,IAAN,4CAAU,WAAOE,GAAP,uFAEAA,EAAQM,SAASC,WAAWC,qBAExBmC,SAAS,OACrBgD,QALQ,SAMR3F,EAAQY,OANA,uBAQRM,IARQ,2CAAV,uDAFH,sDAaHU,QAAQC,MAAR,MAbG,wD,wBAiBA,SAAegE,IAAtB,+B,iDAAO,sHAEG9F,MAAMD,IAAN,4CAAU,WAAOE,GAAP,iGACd4B,QAAQgB,IAAI,SACRvC,EAAmBL,EAAQM,SAASC,WAAWC,qBAC/CC,EAAQJ,EAAiBK,gBAEzBmG,EAAepG,EAAMqG,iBAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAI,IAC7DnG,OANC,SAORX,EAAQY,OAPA,cAQdgB,QAAQgB,IAAIiE,EAAaE,QAAU,0CACnCnF,QAAQgB,IAAIiE,EAAaG,gBAAkB,mDAT7B,UAYRlF,IAZQ,4CAAV,uDAFH,sDAiBHF,QAAQC,MAAR,MAjBG,wD,wBAqBA,SAAeiE,IAAtB,+B,iDAAO,sHAEG/F,MAAMD,IAAN,4CAAU,WAAOE,GAAP,iGACVK,EAAmBL,EAAQM,SAASC,WAAWC,qBAC/CC,EAAQJ,EAAiBK,gBAEzBmG,EAAepG,EAAMqG,iBAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,IAAI,IAC9CnG,OALC,SAMRX,EAAQY,OANA,cAQdgB,QAAQgB,IAAIiE,EAAaE,QAAU,0CACnCnF,QAAQgB,IAAIiE,EAAaG,gBAAkB,mDAT7B,UAYRlF,IAZQ,4CAAV,uDAFH,sDAiBHF,QAAQC,MAAR,MAjBG,wD,wBAqBA,SAAeS,EAAtB,sC,iDAAO,WAAkC2E,EAASC,EAAYC,GAAvD,yGAEGpH,MAAMD,IAAN,4CAAU,WAAOE,GAAP,4FAUd,IATAC,SAASC,eAAe,cAAcC,MAAMC,QAAU,cACtDH,SAASC,eAAe,UAAUC,MAAMC,QAAU,QAC9CgH,EAAOnH,SAASC,eAAe+G,IAC9B9G,MAAMC,QAAU,QACrBgH,EAAKrF,UAAL,gFAC8CmF,EAD9C,4JAIIG,EAAiBD,EAAK7E,uBAAuB,kBAAkB,GAC1DL,EAAI,EAAGA,EAAIiF,EAAa9E,OAAQH,IACnCoF,EADwC,sBACdH,EAAajF,GAAG,GADF,MAE5CN,QAAQgB,IAAI0E,GACZD,EAAetF,WAAf,8JAE0CuF,EAF1C,yEAGoDH,EAAajF,GAAG,GAHpE,uFAI8DiF,EAAajF,GAAG,GAJ9E,uDAbY,OAoBdkF,EAAKrF,WAAL,eApBc,UAqBR/B,EAAQY,OArBA,4CAAV,uDAFH,sDA0BHgB,QAAQC,MAAR,MA1BG,wD,wBA8BA,SAAe+D,EAAtB,sC,iDAAO,WAA4CqB,EAASC,EAAYC,GAAjE,yGAEGpH,MAAMD,IAAN,4CAAU,WAAOE,GAAP,gGAUd,IATAC,SAASC,eAAe,cAAcC,MAAMC,QAAU,cACtDH,SAASC,eAAe,UAAUC,MAAMC,QAAU,QAC9CgH,EAAOnH,SAASC,eAAe+G,IAC9B9G,MAAMC,QAAU,QAErBgH,EAAKrF,UAAL,gFAC8CmF,EAD9C,iIANc,qCASkBK,OAAOJ,EAAa9E,SAC3CH,EAAI,EAAGA,EAAIiF,EAAa9E,OAAQH,IAEvC,IADImF,EAAiBD,EAAK7E,uBAAuB,kBAAkBL,GAC1DW,EAAI,EAAGA,EAAIsE,EAAajF,GAAGG,OAAQQ,IACtC2E,EAAgB,IAAN3E,EAAU,GAAK,gCACzByE,EAF2C,sBAEjBH,EAAajF,GAAGW,GAAG,GAFF,MAG/CwE,EAAetF,WAAf,gFACiCyF,EADjC,wIAG0CF,EAH1C,2EAIoDH,EAAajF,GAAGW,GAAG,GAJvE,oGAKyEsE,EAAajF,GAAGW,GAAG,GAL5F,yDAfU,OAwBduE,EAAKrF,WAAL,eAxBc,UAyBR/B,EAAQY,OAzBA,4CAAV,uDAFH,sDA8BHgB,QAAQC,MAAR,MA9BG,wD,wBAkCA,SAAewE,EAAtB,sC,iDAAO,WAA8CY,EAASC,EAAYC,GAAnE,yGAEGpH,MAAMD,IAAN,4CAAU,WAAOE,GAAP,8FAUd,IATAC,SAASC,eAAe,eAAeC,MAAMC,QAAU,cACvDH,SAASC,eAAe,UAAUC,MAAMC,QAAU,QAC9CgH,EAAOnH,SAASC,eAAe+G,IAC9B9G,MAAMC,QAAU,QAErBgH,EAAKrF,UAAL,gFAC8CmF,EAD9C,8IANc,qCASkBK,OAAOJ,EAAa9E,SAC3CH,EAAI,EAAGA,EAAIiF,EAAa9E,OAAQH,IAEvC,IADImF,EAAiBD,EAAK7E,uBAAuB,kBAAkBL,GAC1DW,EAAI,EAAGA,EAAIsE,EAAajF,GAAGG,OAAQQ,IACtCyE,EAD2C,sBACjBH,EAAajF,GAAGW,GAAG,GADF,MAE/CwE,EAAetF,WAAf,kKAE0CuF,EAF1C,2EAGoDH,EAAajF,GAAGW,GAAG,GAHvE,oGAIyEsE,EAAajF,GAAGW,GAAG,GAJ5F,yDAdU,OAsBduE,EAAKrF,WAAL,eAtBc,UAuBR/B,EAAQY,OAvBA,4CAAV,uDAFH,sDA4BHgB,QAAQC,MAAR,MA5BG,wD,wBAgCA,SAAemC,EAAtB,sC,iDAAO,WAAoCiD,EAASC,EAAYC,GAAzD,yGAEGpH,MAAMD,IAAN,4CAAU,WAAOE,GAAP,4FAUd,IATAC,SAASC,eAAe,eAAeC,MAAMC,QAAU,cACvDH,SAASC,eAAe,UAAUC,MAAMC,QAAU,QAC9CgH,EAAOnH,SAASC,eAAe+G,IAC9B9G,MAAMC,QAAU,QACrBgH,EAAKrF,UAAL,gFAC8CmF,EAD9C,yKAIIG,EAAiBD,EAAK7E,uBAAuB,kBAAkB,GAC1DL,EAAI,EAAGA,EAAIiF,EAAa9E,OAAQH,IACnCoF,EADwC,sBACdH,EAAajF,GAAG,GADF,MAE5CN,QAAQgB,IAAI0E,GACZD,EAAetF,WAAf,qHACwEuF,EADxE,gCACwGH,EAAajF,GAAG,GADxH,uFAE8DiF,EAAajF,GAAG,GAF9E,uDAbY,OAkBdkF,EAAKrF,WAAL,eAlBc,UAmBR/B,EAAQY,OAnBA,4CAAV,uDAFH,sDAwBHgB,QAAQC,MAAR,MAxBG,wD,wBAh2BP4F,MAAM9I,UAAU4G,cAAgB,WAE9B,IADA,IAAImC,EAAa,GACRxF,EAAI,EAAGA,EAAIyF,KAAKtF,OAAQH,IAC3BwF,EAAW9I,eAAe+I,KAAKzF,IACjCwF,EAAWC,KAAKzF,IAAIE,KAAKF,GAChByF,KAAKC,YAAYD,KAAKzF,MAAQA,IACvCwF,EAAWC,KAAKzF,IAAM,CAACA,IAG3B,OAAOwF,GAcTG,OAAOC,SAAQ,SAACC,GACVA,EAAKC,OAASH,OAAOI,SAASlI,QAEhCE,SAASC,eAAe,gBAAgBC,MAAMC,QAAU,OACxDH,SAASC,eAAe,eAAeC,MAAMC,QAAU,OACvDH,SAASC,eAAe,OAAOsC,QAAU1C,EACzCG,SAASC,eAAe,WAAWsC,QAAUV,EAC7C7B,SAASC,eAAe,YAAYsC,QAAUV,M","sources":["webpack:///webpack/bootstrap?","webpack:///webpack/runtime/define property getters?","webpack:///webpack/runtime/hasOwnProperty shorthand?","webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\n// There are several helpful constants\nconst columns = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nconst right_headers = [\n  \"Name (incl. titles)\",\n  \"Affiliation/Organisation and location\",\n  \"Role\",\n  \"Email\",\n  \"Session Name\",\n  \"Session Description\",\n  \"Presentation Title\",\n  \"Presentation Abstract\",\n  \"Abstract URL\",\n  \"Video URL\",\n];\n\nconst black_list_words = [\n  \"director\",\n  \"department\",\n  \"team\",\n  \"group\",\n  \"consortium\",\n  \"project\",\n  \"university\",\n  \"institution\",\n  \"program\",\n  \"organization\",\n  \"research\",\n  \"network\",\n  \"international\",\n  \"medical\",\n  \"center\",\n  \"application\",\n  \"organisation\",\n  \"on behalf\",\n  \"study\",\n  \"genetic\",\n  \"medicine\",\n  \"topmed\",\n  \"genom\",\n  \"board\",\n  \"institute\",\n  \"science\",\n  \"college\",\n  \"accociat\",\n  \"global\",\n  \"develop\",\n  \"health\",\n  \"workplace\",\n  \"workspace\",\n  \"grupo\",\n  \"committee\",\n  \"hospital\",\n  \"student\",\n  \"associat\",\n  \"clinic\",\n  \"service\",\n  \"society\",\n  \"social\",\n  \"collaborat\",\n  \"national\",\n  \"working\",\n  \"contribut\",\n  \"surgery\",\n  \"covid\",\n  \"candidate\",\n  \"scient\",\n  \"non role\",\n  \"question\",\n  \"answer\",\n  \"unknown\",\n  \"author\",\n  \"invest\",\n  \"general\",\n  \"panel\",\n  \"discus\",\n  \"graduat\",\n  \"mr.\",\n  \"mrs.\",\n  \"ms.\",\n  \"technical\",\n  \"leader\",\n  \"senior\",\n  \"other\",\n];\n\nconst roles = [\n  \"moderator\",\n  \"speaker\",\n  \"poster presenter\",\n  \"panelist\",\n  \"keynote speaker\",\n  \"invited speaker\",\n  \"abstract author\",\n];\n\n// Loading spinner gif\nconst spinner = '<div class=\"loader\" style=\"--b: 10px; --c:gray; width:50px; --n:20; --g:7deg\"></div>';\n\n// Function to check if a string is a valid email address\nconst validateEmail = (email) => {\n  return String(email)\n    .toLowerCase()\n    .match(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n};\n\n// Method to get duplicates from an array\nArray.prototype.getDuplicates = function () {\n  let duplicates = {};\n  for (let i = 0; i < this.length; i++) {\n    if (duplicates.hasOwnProperty(this[i])) {\n      duplicates[this[i]].push(i);\n    } else if (this.lastIndexOf(this[i]) !== i) {\n      duplicates[this[i]] = [i];\n    }\n  }\n  return duplicates;\n};\n\n// Function to check if a URL is valid\nfunction isValidHttpUrl(string) {\n  let url;\n  try {\n    url = new URL(string);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Define the main buttons in the taskpane\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-welcome\").style.display = \"flex\";\n    document.getElementById(\"run\").onclick = run;\n    document.getElementById(\"refresh\").onclick = refresh;\n    document.getElementById(\"refresh2\").onclick = refresh;\n  }\n});\n\nexport async function run() {\n  try {\n    await Excel.run(async (context) => {\n      /**\n       * Main start of the script.\n       */\n      // Hide the welcome page and show the app page.\n      document.getElementById(\"app-welcome\").style.display = \"none\";\n      document.getElementById(\"app-body\").style.display = \"flex\";\n      document.getElementById(\"loader\").style.display = \"flex\";\n\n      // Load data from the Excel sheet.\n      let currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n      let range = currentWorksheet.getUsedRange();\n      range.load(\"rowCount, columnCount, values\");\n      await context.sync();\n      let data = range.values;\n      let rowCount = range.rowCount;\n      let columnCount = range.columnCount;\n\n      // If there is too much data, show an error message.\n      if (data === null) {\n        document.getElementById(\"loader\").style.display = \"none\";\n        document.getElementById(\"null-body\").style.display = \"flex\";\n        return;\n      }\n\n      // Run the tests and show the results.\n      await test_headers(data);\n      await test_data_range(columnCount, rowCount);\n      await test_author_names(data, rowCount);\n      await test_author_roles(data, rowCount);\n      await test_author_emails(data, rowCount);\n      await test_session_names(data, rowCount);\n      await test_titles(data, rowCount);\n      await test_urls(data, rowCount);\n      await test_poster_sessions(data, rowCount);\n      await test_several_main_roles(data, rowCount);\n      await test_duplicates(data, rowCount);\n\n      // If there is no error, show the success message.\n      if (document.getElementById(\"errors-msg\").style.display === \"none\") {\n        document.getElementById(\"loader\").style.display = \"none\";\n        document.getElementById(\"no-errors-msg\").style.display = \"inline-grid\";\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function refresh() {\n  try {\n    await Excel.run(async (context) => {\n      /**\n       * Restart the tests\n       */\n      // Hide the results of the previous run\n      document.getElementById(\"errors-msg\").style.display = \"none\";\n      document.getElementById(\"warning-msg\").style.display = \"none\";\n      document.getElementById(\"no-errors-msg\").style.display = \"none\";\n      // Clear the errors message\n      document.getElementById(\"header-errors\").innerHTML = \"\";\n      document.getElementById(\"data-range-errors\").innerHTML = \"\";\n      document.getElementById(\"author-name-errors\").innerHTML = \"\";\n      document.getElementById(\"author-role-errors\").innerHTML = \"\";\n      document.getElementById(\"author-email-errors\").innerHTML = \"\";\n      document.getElementById(\"session-names-errors\").innerHTML = \"\";\n      document.getElementById(\"title-errors\").innerHTML = \"\";\n      document.getElementById(\"url-errors\").innerHTML = \"\";\n      document.getElementById(\"poster_session_errors\").innerHTML = \"\";\n      document.getElementById(\"duplicate-errors\").innerHTML = \"\";\n      // Clear the warnings message\n      document.getElementById(\"author-name-warnings\").innerHTML = \"\";\n      document.getElementById(\"url-warnings\").innerHTML = \"\";\n      document.getElementById(\"title-warnings\").innerHTML = \"\";\n      document.getElementById(\"several-main-role-warnings\").innerHTML = \"\";\n      // Run the tests again\n      await run();\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_headers(data) {\n  try {\n    await Excel.run(async (context) => {\n      /**\n       * This test checks the wokrsheet headers\n       */\n      // Set the spinner while the test is running\n      document.getElementById(\"header-errors\").innerHTML = spinner;\n\n      // Set the useful variables\n      let headers = data[0];\n\n      let errors = [];\n      for (let i = 0; i < 10; i++) {\n        // Check if the header match the expected header\n        if (headers[i] !== right_headers[i]) {\n          let url_cell_address = `${columns[i]}1`;\n          errors.push([url_cell_address, `Header must be \"${right_headers[i]}\"`]);\n        }\n      }\n\n      //If there are errors, create a card with the errors\n      document.getElementById(\"header-errors\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await error_card_creator(\"header-errors\", \"HEADERS\", errors);\n        let card = document.getElementById(\"header-errors\").getElementsByClassName(\"card\")[0];\n        card.innerHTML += `<div class=\"accept-button-container\">\n                             <span role=\"button\" id=\"set-headers\" class=\"accept-button\">Set Right Headers</span>\n                           </div>`;\n        document.getElementById(\"set-headers\").onclick = set_headers;\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_data_range(columnCount, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      /**\n       * This test checks the used range of the worksheet\n       * If there is any information outside the operating range, the errors will appear\n       */\n      // Set the spinner while the test is running\n      document.getElementById(\"data-range-errors\").innerHTML = spinner;\n\n      // Get current worksheet\n      let currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n\n      let errors = [];\n      if (columnCount > 10) {\n        // If there are some data out of the operating range, create an error message\n        let error_range = currentWorksheet.getRange(`K1:${columns[columnCount - 1]}${rowCount}`);\n        error_range.load(\"values\");\n        console.log(\"loading\");\n        await context.sync();\n        console.log(error_range.values);\n        let values = error_range.values;\n        for (let i = 0; i < values.length; i++) {\n          for (let j = 0; j < values[i].length; j++) {\n            if (values[i][j] !== \"\") {\n              errors.push([`${columns[j + 10]}${i + 1}`, `Data out of operating range`]);\n            }\n          }\n        }\n        console.log(errors);\n      }\n\n      //If there are errors, create a card with the errors\n      document.getElementById(\"data-range-errors\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await error_card_creator(\"data-range-errors\", \"RANGE\", errors);\n        let card = document.getElementById(\"data-range-errors\").getElementsByClassName(\"card\")[0];\n        card.innerHTML += `<div class=\"accept-button-container\">\n                             <span role=\"button\" id=\"clear-range\" class=\"accept-button\">Clear all</span>\n                           </div>`;\n        document.getElementById(\"clear-range\").onclick = clear_range;\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_author_names(data, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      /**\n       * This test checks the author names\n       */\n      // Set the spinner while the test is running\n      document.getElementById(\"author-name-errors\").innerHTML = spinner;\n      document.getElementById(\"author-name-warnings\").innerHTML = spinner;\n\n      // Set useful variables\n      let author_index = 0;\n      let regex = /\\d+/gm;\n      let unexpected_characters = [\n        \"{\", \"}\", \"(\", \")\", \"[\", \"]\",\n        \"!\", \"?\", \"/\", \"|\", \"~\", \"*\",\n        \"&\", \"#\", \"$\", \"%\", \"^\", \"=\",\n        \"+\", \"<\", \">\", \"@\",\n      ];\n\n      let errors = [];\n      let warnings = [];\n      for (let index = 1; index < rowCount; index++) {\n        let author_name_address = `A${index + 1}`;\n        let row = data[index];\n        let author_name = row[author_index].toString().trim();\n        let unexpected_characters_found = [];\n        for (let i = 0; i < unexpected_characters.length; i++) {\n          if (author_name.includes(unexpected_characters[i])) {\n            unexpected_characters_found.push(unexpected_characters[i]);\n          }\n        }\n\n        //Test if the author name cell has a number in it\n        if (regex.exec(author_name) !== null) {\n          errors.push([author_name_address, `Author name \"${author_name}\" contains a number`]);\n        }\n        //Test if the author name cell is empty\n        else if (author_name === \"\") {\n          errors.push([author_name_address, `Author name is empty`]);\n        }\n        //Test if the author name cell don't have spaces in it\n        else if (!author_name.includes(\" \")) {\n          errors.push([author_name_address, `Author name \"${author_name}\" doesn't contain spaces`]);\n        }\n        //Test if the author name cell is too short\n        else if (author_name.length < 5) {\n          errors.push([author_name_address, `Author name \"${author_name}\" is too short`]);\n        }\n        //Test if the author name cell is too long\n        else if (author_name.length > 50) {\n          errors.push([author_name_address, `Author name is too long`]);\n        }\n        // Test if the author name cell contains unexpected characters\n        else if (unexpected_characters_found.length > 0) {\n          errors.push([\n            author_name_address,\n            `Author name \"${author_name}\" contains unexpected characters: ${unexpected_characters_found.join(\" \")}`,\n          ]);\n        }\n        //Test if the author name cell does not contain a black list word\n        else {\n          let lower_author_name = author_name.toLowerCase();\n          for (let j = 0; j < black_list_words.length; j++) {\n            if (lower_author_name.includes(black_list_words[j])) {\n              errors.push([\n                author_name_address,\n                `Author name \"${author_name}\" contains a word from a blacklist: \"${black_list_words[j]}\"`,\n              ]);\n              break;\n            }\n          }\n        }\n        // Test if author name does not start with a capital letter\n        if (author_name.charAt(0) !== author_name.charAt(0).toUpperCase()) {\n          warnings.push([author_name_address, `Author name \"${author_name}\" doesn't begin with a capital letter`]);\n        }\n      }\n      //If there are errors, create a card with the errors\n      document.getElementById(\"author-name-errors\").innerHTML = \"\";\n      document.getElementById(\"author-name-warnings\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await error_card_creator(\"author-name-errors\", \"AUTHORS\", errors);\n      }\n      if (warnings.length > 0) {\n        await warning_card_creator(\"author-name-warnings\", \"AUTHORS\", warnings);\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_author_roles(data, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      // Set the spinner while the test is running\n      document.getElementById(\"author-role-errors\").innerHTML = spinner;\n\n      // Set useful variables\n      let role_index = 2;\n\n      let errors = [];\n      for (let index = 1; index < rowCount; index++) {\n        let author_role_address = `C${index + 1}`;\n        let row = data[index];\n        let author_role = row[role_index].toString().trim();\n        let lower_author_role = author_role.toLowerCase();\n        // Test if the author role cell is empty\n        if (author_role === \"\") {\n          errors.push([author_role_address, `Author role is empty`]);\n        }\n        // Test if the author role cell is invalid\n        else if (!roles.includes(lower_author_role)) {\n          errors.push([author_role_address, `Author role \"${author_role}\" is invalid`]);\n        }\n      }\n      //If there are errors, create a card with the errors\n      document.getElementById(\"author-role-errors\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await error_card_creator(\"author-role-errors\", \"ROLES\", errors);\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_author_emails(data, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      // Set the spinner while the test is running\n      document.getElementById(\"author-email-errors\").innerHTML = spinner;\n\n      // Set useful variables\n      let email_index = 3;\n\n      let errors = [];\n      for (let index = 1; index < rowCount; index++) {\n        let email_address = `D${index + 1}`;\n        let row = data[index];\n        let email = row[email_index].toString().trim();\n        // Test if the author email cell is not empty\n        if (email !== \"\") {\n          if (!validateEmail(email)) {\n            errors.push([email_address, `Author email \"${email}\" is invalid`]);\n          }\n        }\n      }\n      //If there are errors, create a card with the errors\n      document.getElementById(\"author-email-errors\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await error_card_creator(\"author-email-errors\", \"EMAILS\", errors);\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_session_names(data, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      // Set the spinner while the test is running\n      document.getElementById(\"session-names-errors\").innerHTML = spinner;\n\n      // Set useful variables\n      let session_name_index = 4;\n\n      let errors = [];\n      for (let index = 1; index < rowCount; index++) {\n        let session_name_address = `E${index + 1}`;\n        let row = data[index];\n        let session_name = row[session_name_index].toString().trim();\n        // Test if the session name cell is empty\n        if (session_name === \"\") {\n          errors.push([session_name_address, `Session name is empty`]);\n        }\n      }\n      //If there are errors, create a card with the errors\n      document.getElementById(\"session-names-errors\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await error_card_creator(\"session-names-errors\", \"SESSION\", errors);\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_titles(data, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      // Set the spinner while the test is running\n      document.getElementById(\"title-errors\").innerHTML = spinner;\n      document.getElementById(\"title-warnings\").innerHTML = spinner;\n\n      // Set useful variables\n      let role_index = 2;\n      let title_index = 6;\n\n      let errors = [];\n      let warnings = [];\n      for (let index = 1; index < rowCount; index++) {\n        let title_address = `G${index + 1}`;\n        let row = data[index];\n        let role = row[role_index].toString().trim();\n        let title = row[title_index].toString().trim();\n        // Test if the title cell is not empty\n        if (role !== \"Moderator\" && title === \"\") {\n          errors.push([title_address, `Presentation title is empty`]);\n          console.warn(`Presentation title is empty in row ${index + 1}`);\n        }\n        // Test if the title cell is too short\n        else if (role !== \"Moderator\" && title.length <= 5) {\n          warnings.push([title_address, `Presentation title is too short`]);\n        }\n        // Test if the title cell is empty for a moderator\n        else if (role === \"Moderator\" && title !== \"\") {\n          errors.push([title_address, \"Presentation title should be empty (Moderator)\"]);\n        }\n      }\n      //If there are errors, create a card with the errors\n      document.getElementById(\"title-errors\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await error_card_creator(\"title-errors\", \"TITLE\", errors);\n      }\n      //If there are warnings, create a card with the warnings\n      document.getElementById(\"title-warnings\").innerHTML = \"\";\n      if (warnings.length > 0) {\n        await warning_card_creator(\"title-warnings\", \"TITLE\", warnings);\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_urls(data, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      // Set the spinner while the test is running\n      document.getElementById(\"url-errors\").innerHTML = spinner;\n      document.getElementById(\"url-warnings\").innerHTML = spinner;\n\n      // Set useful variables\n      let role_index = 2;\n      let url_index = 8;\n      let video_url_index = 9;\n\n      let errors = [];\n      let warnings = [];\n      for (let index = 1; index < rowCount; index++) {\n        let url_address = `I${index + 1}`;\n        let video_url_address = `J${index + 1}`;\n        let row = data[index];\n        let role = row[role_index].toString().trim();\n        let raw_url = row[url_index].toString().trim();\n        let url_list = [];\n        let raw_video_url = row[video_url_index].toString().trim();\n        let video_url_list = [];\n\n        if (raw_url.includes(\"||\")) {\n          url_list = raw_url.split(\"||\");\n        } else {\n          url_list = [raw_url];\n        }\n        console.log(url_list);\n        if (raw_video_url.includes(\"||\")) {\n          video_url_list = raw_video_url.split(\"||\");\n        } else {\n          video_url_list = [raw_video_url];\n        }\n        console.log(video_url_list);\n        for (const url of url_list) {\n          // Test if the abstract url is valid for any role except moderator\n          if (role !== \"Moderator\") {\n            //check if the url not empty\n            if (url === \"\") {\n              errors.push([url_address, `Presentation URL is empty`]);\n            }\n            // Check if the url is valid\n            else if (!isValidHttpUrl(url)) {\n              errors.push([\n                url_address,\n                `<span class=\"title-decoration\" title=\"${url}\">Presentation URL</span> is invalid`,\n              ]);\n            }\n            // Check if the url do not lead to GitHub PDF viewer\n            else if (url.includes(\"github\")) {\n              errors.push([url_address, `Presentation URL leads to the github PDF viewer`]);\n            }\n          }\n          // Test if the abstract url is valid for a moderator\n          else if (role === \"Moderator\" && url !== \"\") {\n            if (!isValidHttpUrl(url)) {\n              errors.push([\n                url_address,\n                `<span class=\"title-decoration\" title=\"${url}\">Presentation URL</span> is invalid`,\n              ]);\n            }\n            warnings.push([url_address, `Double check if the moderator needs the URL`]);\n          }\n        }\n        for (const video_url of video_url_list) {\n          // Test if the video url is valid for any role except moderator\n          if (role !== \"Moderator\" && video_url !== \"\") {\n            if (!isValidHttpUrl(video_url)) {\n              errors.push([\n                video_url_address,\n                `<span class=\"title-decoration\" title=\"${video_url}\">Video URL</span> is invalid`,\n              ]);\n            }\n          }\n          // Test if the video url is valid for a moderator\n          else if (role === \"Moderator\" && video_url !== \"\") {\n            errors.push([video_url_address, `Video URL must be empty for Moderator`]);\n          }\n        }\n      }\n      //If there are errors, create a card with the errors\n      document.getElementById(\"url-errors\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await error_card_creator(\"url-errors\", \"URL\", errors);\n      }\n      //If there are warnings, create a card with the warnings\n      document.getElementById(\"url-warnings\").innerHTML = \"\";\n      if (warnings.length > 0) {\n        await warning_card_creator(\"url-warnings\", \"URL\", warnings);\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_duplicates(data, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      // Set the spinner while the test is running\n      document.getElementById(\"duplicate-errors\").innerHTML = spinner;\n      // Get the current worksheet\n      let currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n\n      let i = rowCount;\n      let concat_cell_errors = currentWorksheet.getRange(\"X2\");\n      // Concatenate Name, Affiliation, Role, Session Name and Presentation Title\n      concat_cell_errors.formulas = [[`=CONCATENATE(A2:A${i}, B2:B${i}, C2:C${i}, E2:E${i}, G2:G${i})`]];\n      await context.sync();\n      let concat_range_errors = currentWorksheet.getRange(`X2:X${i}`);\n      concat_range_errors.load(\"values\");\n      await context.sync();\n      // Search for error duplicates in the concatenated cells\n      let errors_res = concat_range_errors.values.flat();\n      let errors_dup = errors_res.getDuplicates();\n      let errors_keys = Object.keys(errors_dup);\n      let errors = [];\n      for (const key of errors_keys) {\n        let temp_errors = [];\n        for (const index of errors_dup[key]) {\n          temp_errors.push([`A${index + 2}`, `${data[index + 1][0]} | ${data[index + 1][2]}`]);\n        }\n        if (temp_errors.length > 1) {\n          errors.push(temp_errors);\n        }\n      }\n      concat_range_errors.clear();\n      await context.sync();\n      //If there are errors, create a card with the errors\n      document.getElementById(\"duplicate-errors\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await duplicate_error_card_creator(\"duplicate-errors\", \"DUPLICATE\", errors);\n        let card = document.getElementById(\"duplicate-errors\").getElementsByClassName(\"card\")[0];\n        card.innerHTML += `<div class=\"accept-button-container\">\n                             <span role=\"button\"\n                             id=\"remove-full-duplicates\"\n                             class=\"accept-button\"\n                             title=\"Removes fully matched rows\">Remove full duplicates\n                             <i class=\"ms-Icon ms-Icon--Warning ms-font-xxl\" title=\"This action cannot be undone via Ctrl+Z\"></i>\n                             </span>\n                           </div>\n                           <div class=\"accept-button-container\">\n                             <span \n                             role=\"button\" \n                             id=\"remove-presented-duplicates\" \n                             class=\"accept-button\" \n                             title=\"Removes rows that are matched by:\\nName (incl. titles)\\nAffiliation/Organisation and location\\nRole\\nSession Name\\nPresentation Title\">Remove presented duplicates\n                             <i class=\"ms-Icon ms-Icon--Warning ms-font-xxl\" title=\"This action cannot be undone via Ctrl+Z\"></i>\n                             </span>\n                           </div>`;\n        document.getElementById(\"remove-full-duplicates\").onclick = remove_full_duplicates;\n        document.getElementById(\"remove-presented-duplicates\").onclick = remove_presented_duplicates;\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_several_main_roles(data, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      // Set the spinner while the test is running\n      document.getElementById(\"several-main-role-warnings\").innerHTML = spinner;\n      // Get the current worksheet\n      let currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n      // Get all presentation titles\n      let concat_range_warnings = currentWorksheet.getRange(`G2:G${rowCount}`);\n      concat_range_warnings.load(\"values\");\n      await context.sync();\n\n      // Get all indexes for persons in the same presentation\n      let warnings_res = concat_range_warnings.values.flat();\n      let warnings_dup = warnings_res.getDuplicates();\n      let warnings_keys = Object.keys(warnings_dup);\n      let main_roles = [\"Poster Presenter\", \"Speaker\", \"Invited Speaker\", \"Keynote Speaker\"];\n\n      // Search for several main roles by presentation\n      let warnings = [];\n      for (const key of warnings_keys) {\n        let temp_warnings = [];\n        for (const index of warnings_dup[key]) {\n          if (main_roles.includes(data[index + 1][2])) {\n            temp_warnings.push([`A${index + 2}`, `${data[index + 1][0]} | ${data[index + 1][2]}`]);\n          }\n        }\n        if (temp_warnings.length > 1) {\n          warnings.push(temp_warnings);\n        }\n      }\n      //If there are warnings, create a card with the warnings\n      document.getElementById(\"several-main-role-warnings\").innerHTML = \"\";\n      if (warnings.length > 0) {\n        await duplicate_warning_card_creator(\n          \"several-main-role-warnings\",\n          \"SEVERAL MAIN ROLES BY PRESENTATION\",\n          warnings\n        );\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function test_poster_sessions(data, rowCount) {\n  try {\n    await Excel.run(async (context) => {\n      // Set the spinner while the test is running\n      document.getElementById(\"poster_session_errors\").innerHTML = spinner;\n\n      // Set useful variables\n      let role_index = 2;\n      let session_index = 4;\n      let non_poster_roles = [\"speaker\", \"invited speaker\", \"keynote speaker\"];\n      console.log(\"Starting test_poster_sessions\");\n\n      let poster_sessions = new Set();\n      for (let i = 1; i < rowCount; i++) {\n        if (data[i][role_index] === \"Poster Presenter\") {\n          poster_sessions.add(data[i][session_index]);\n        }\n      }\n      console.log(poster_sessions);\n\n      let errors = [];\n      for (let index = 1; index < rowCount; index++) {\n        let author_cell_address = `A${index + 1}`;\n        let row = data[index];\n        let role = row[role_index].toString().trim();\n        let session_cell_value = row[session_index].toString().trim();\n        // Test if the title cell is not empty\n        if (poster_sessions.has(session_cell_value)) {\n          if (non_poster_roles.includes(role.toLowerCase())) {\n            errors.push([author_cell_address, `${role} in a poster session`]);\n          }\n        }\n      }\n      //If there are errors, create a card with the errors\n      document.getElementById(\"poster_session_errors\").innerHTML = \"\";\n      if (errors.length > 0) {\n        await error_card_creator(\"poster_session_errors\", \"WRONG ROLE IN POSTER SESSION\", errors);\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function set_headers() {\n  try {\n    await Excel.run(async (context) => {\n      // Get the current worksheet\n      let currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n      let range = currentWorksheet.getRange(\"A1:J1\");\n      // Set the headers\n      range.values = [right_headers];\n      await context.sync();\n      document.getElementById(\"header-errors\").innerHTML = \"\";\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function clear_range() {\n  try {\n    await Excel.run(async (context) => {\n      // Get the current worksheet\n      const sheet = context.workbook.worksheets.getActiveWorksheet();\n      // Clear the range\n      let range = sheet.getRange(\"K:Z\");\n      range.clear();\n      await context.sync();\n      // Restart the test\n      await test_data_range();\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function remove_full_duplicates() {\n  try {\n    await Excel.run(async (context) => {\n      console.log(\"In it\");\n      let currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n      let range = currentWorksheet.getUsedRange();\n\n      let deleteResult = range.removeDuplicates([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], true);\n      deleteResult.load();\n      await context.sync();\n      console.log(deleteResult.removed + \" entries with duplicate names removed.\");\n      console.log(deleteResult.uniqueRemaining + \" entries with unique names remain in the range.\");\n\n      // Restart the tests\n      await refresh();\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function remove_presented_duplicates() {\n  try {\n    await Excel.run(async (context) => {\n      let currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n      let range = currentWorksheet.getUsedRange();\n\n      let deleteResult = range.removeDuplicates([0, 1, 2, 4, 6], true);\n      deleteResult.load();\n      await context.sync();\n\n      console.log(deleteResult.removed + \" entries with duplicate names removed.\");\n      console.log(deleteResult.uniqueRemaining + \" entries with unique names remain in the range.\");\n\n      // Restart the test\n      await refresh();\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function error_card_creator(card_id, card_title, card_content) {\n  try {\n    await Excel.run(async (context) => {\n      document.getElementById(\"errors-msg\").style.display = \"inline-grid\";\n      document.getElementById(\"loader\").style.display = \"none\";\n      let card = document.getElementById(card_id);\n      card.style.display = \"block\";\n      card.innerHTML = `<div class=\"card\">\n                          <div class=\"card-label\">${card_title}\n                          <sup class=\"error-label\" title=\"Need to fix\">ERROR</sup></div>\n                          <div class=\"card-container\"></div>`;\n      let card_container = card.getElementsByClassName(\"card-container\")[0];\n      for (let i = 0; i < card_content.length; i++) {\n        let on_click = `set_active('${card_content[i][0]}')`;\n        console.log(on_click);\n        card_container.innerHTML += `<div class=\"container-row\">\n                                       <div class=\"goto-cell-button\" \n                                       onclick=\"${on_click}\" \n                                       title=\"Go to cell\">${card_content[i][0]}</div>\n                                       <div class=\"row-explanation\">${card_content[i][1]}</div>\n                                     </div>`;\n      }\n      card.innerHTML += `</div></div>`;\n      await context.sync();\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function duplicate_error_card_creator(card_id, card_title, card_content) {\n  try {\n    await Excel.run(async (context) => {\n      document.getElementById(\"errors-msg\").style.display = \"inline-grid\";\n      document.getElementById(\"loader\").style.display = \"none\";\n      let card = document.getElementById(card_id);\n      card.style.display = \"block\";\n      let container = `<div class=\"card-container\"></div>`;\n      card.innerHTML = `<div class=\"card\">\n                          <div class=\"card-label\">${card_title}\n                          <sup class=\"error-label\" title=\"Need to fix\">ERROR</sup></div>\n                          ${container.repeat(card_content.length)}`;\n      for (let i = 0; i < card_content.length; i++) {\n        let card_container = card.getElementsByClassName(\"card-container\")[i];\n        for (let j = 0; j < card_content[i].length; j++) {\n          let deleted = j === 0 ? \"\" : '<div class=\"duplicate\"></div>';\n          let on_click = `set_active('${card_content[i][j][0]}')`;\n          card_container.innerHTML += `<div class=\"container-row\">\n                                         ${deleted}\n                                         <div class=\"goto-cell-button\" \n                                         onclick=\"${on_click}\" \n                                         title=\"Go to cell\">${card_content[i][j][0]}</div>\n                                         <div class=\"row-explanation duplicates\">${card_content[i][j][1]}</div>\n                                       </div>`;\n        }\n      }\n      card.innerHTML += `</div></div>`;\n      await context.sync();\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function duplicate_warning_card_creator(card_id, card_title, card_content) {\n  try {\n    await Excel.run(async (context) => {\n      document.getElementById(\"warning-msg\").style.display = \"inline-grid\";\n      document.getElementById(\"loader\").style.display = \"none\";\n      let card = document.getElementById(card_id);\n      card.style.display = \"block\";\n      let container = `<div class=\"card-container\"></div>`;\n      card.innerHTML = `<div class=\"card\">\n                          <div class=\"card-label\">${card_title}\n                          <sup class=\"warning-label\" title=\"Need to double-check\">WARNING</sup></div>\n                          ${container.repeat(card_content.length)}`;\n      for (let i = 0; i < card_content.length; i++) {\n        let card_container = card.getElementsByClassName(\"card-container\")[i];\n        for (let j = 0; j < card_content[i].length; j++) {\n          let on_click = `set_active('${card_content[i][j][0]}')`;\n          card_container.innerHTML += `<div class=\"container-row\">\n                                         <div class=\"goto-cell-button\" \n                                         onclick=\"${on_click}\" \n                                         title=\"Go to cell\">${card_content[i][j][0]}</div>\n                                         <div class=\"row-explanation duplicates\">${card_content[i][j][1]}</div>\n                                       </div>`;\n        }\n      }\n      card.innerHTML += `</div></div>`;\n      await context.sync();\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function warning_card_creator(card_id, card_title, card_content) {\n  try {\n    await Excel.run(async (context) => {\n      document.getElementById(\"warning-msg\").style.display = \"inline-grid\";\n      document.getElementById(\"loader\").style.display = \"none\";\n      let card = document.getElementById(card_id);\n      card.style.display = \"block\";\n      card.innerHTML = `<div class=\"card\">\n                          <div class=\"card-label\">${card_title}\n                          <sup class=\"warning-label\" title=\"Need to double-check\">WARNING</sup></div>\n                          <div class=\"card-container\"></div>`;\n      let card_container = card.getElementsByClassName(\"card-container\")[0];\n      for (let i = 0; i < card_content.length; i++) {\n        let on_click = `set_active('${card_content[i][0]}')`;\n        console.log(on_click);\n        card_container.innerHTML += `<div class=\"container-row\">\n                                       <div class=\"goto-cell-button\" onclick=\"${on_click}\" title=\"Go to cell\">${card_content[i][0]}</div>\n                                       <div class=\"row-explanation\">${card_content[i][1]}</div>\n                                     </div>`;\n      }\n      card.innerHTML += `</div></div>`;\n      await context.sync();\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["__webpack_require__","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","columns","right_headers","black_list_words","roles","spinner","validateEmail","email","String","toLowerCase","match","isValidHttpUrl","string","url","URL","_","protocol","run","Excel","context","document","getElementById","style","display","currentWorksheet","workbook","worksheets","getActiveWorksheet","range","getUsedRange","load","sync","data","values","rowCount","columnCount","test_headers","test_data_range","test_author_names","test_author_roles","test_author_emails","test_session_names","test_titles","test_urls","test_poster_sessions","test_several_main_roles","test_duplicates","console","error","refresh","innerHTML","headers","errors","i","url_cell_address","push","length","error_card_creator","getElementsByClassName","onclick","set_headers","error_range","getRange","log","j","clear_range","author_index","regex","unexpected_characters","warnings","index","author_name_address","row","author_name","toString","trim","unexpected_characters_found","includes","exec","join","lower_author_name","charAt","toUpperCase","warning_card_creator","author_role_address","author_role","lower_author_role","email_address","session_name_address","title_address","role","title","warn","url_address","video_url_address","raw_url","raw_video_url","url_list","split","video_url_list","video_url","formulas","concat_range_errors","errors_res","flat","errors_dup","getDuplicates","errors_keys","keys","temp_errors","clear","duplicate_error_card_creator","remove_full_duplicates","remove_presented_duplicates","concat_range_warnings","warnings_res","warnings_dup","warnings_keys","main_roles","temp_warnings","duplicate_warning_card_creator","non_poster_roles","poster_sessions","Set","add","author_cell_address","session_cell_value","has","deleteResult","removeDuplicates","removed","uniqueRemaining","card_id","card_title","card_content","card","card_container","on_click","repeat","deleted","Array","duplicates","this","lastIndexOf","Office","onReady","info","host","HostType"],"sourceRoot":""}